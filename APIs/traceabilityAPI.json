{
  "openapi": "3.0.0",
  "info": {
    "description": "# Introductions\nThis template is intended to to be a good starting point for describing\nhow users can interact with the various methods of your API. \nWe recommend informing the user about various aspects of your api such as:\n\n\n# Getting Started\n\n## Using The API\n\n## Extra Developer Documentation:\nIf you have more developer documentation or tutorials specific to helping\ndevelopers interact with this endpoint.\n**url:** 'https://example.com/documentation/link'\n\n# Uptime & Planned Outages\n\n# Authentication & Rate Limits\n# Terms of Use, Copyright and Attribution\nPlease ensure you comply with the following policies prior to using any data\nwithin this API.\n\n- [Terms of Use](https://example.com/terms-use)\n- [Privacy Policy](https://example.com/privacy)\n\n# Contact Us\n",
    "contact": {
      "email": "you@example.com",
      "url": "https://example.com/help"
    },
    "version": "unreleased",
    "title": "Untitled API"
  },
  "paths": {
    "/objectEvents": {
      "post": {
        "tags": [
          "ObjectEvent"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number"
            },
            "description": "The page that the user wants to return.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number"
            },
            "description": "The number of results per page the user wants to return.",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectEvent"
                }
              }
            }
          }
        },
        "summary": "Create a new ObjectEvent",
        "operationId": "createObjectEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectEvent"
              }
            }
          }
        },
        "description": "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n\n\n\nThis path supports pagination and uses the following query parameters:\n\n| Query Parameter | Description | Example |\n| --- | --- | --- |\n| 'page' | The page that the user wants to return. | 'page=1' (default: 1)|\n| 'limit' | The number of results per page the user wants to return. | 'limit=10' (default: 10)|\n\nThis creates a URI structure similar to:\n\nPage 1: '/objectEvents?page=1&limit=10'\n\nPage 2: '/objectEvents?page=2&limit=10'\n\n                    ",
        "security": [
          {
            "main_auth": [
              "read:users",
              "write:users"
            ]
          }
        ]
      }
    },
    "/objectEvents/{eventID}": {
      "get": {
        "tags": [
          "ObjectEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectEvent"
                }
              }
            }
          }
        },
        "summary": "Get a ObjectEvent",
        "operationId": "getObjectEventById",
        "description": "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
      },
      "put": {
        "tags": [
          "ObjectEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectEvent"
                }
              }
            }
          }
        },
        "summary": "Update a ObjectEvent",
        "operationId": "updateObjectEventById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectEvent"
              }
            }
          }
        },
        "description": "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
      }
    },
    "/transactionEvents": {
      "post": {
        "tags": [
          "TransactionEvent"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionEvent"
                }
              }
            }
          }
        },
        "summary": "Create a new TransactionEvent",
        "operationId": "createTransactionEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionEvent"
              }
            }
          }
        }
      }
    },
    "/transactionEvents/{eventID}": {
      "get": {
        "tags": [
          "TransactionEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionEvent"
                }
              }
            }
          }
        },
        "summary": "Get a TransactionEvent",
        "operationId": "getTransactionEventById"
      },
      "put": {
        "tags": [
          "TransactionEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionEvent"
                }
              }
            }
          }
        },
        "summary": "Update a TransactionEvent",
        "operationId": "updateTransactionEventById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionEvent"
              }
            }
          }
        }
      }
    },
    "/aggregationEvents": {
      "post": {
        "tags": [
          "AggregationEvent"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationEvent"
                }
              }
            }
          }
        },
        "summary": "Create a new AggregationEvent",
        "operationId": "createAggregationEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregationEvent"
              }
            }
          }
        }
      }
    },
    "/aggregationEvents/{eventID}": {
      "get": {
        "tags": [
          "AggregationEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationEvent"
                }
              }
            }
          }
        },
        "summary": "Get a AggregationEvent",
        "operationId": "getAggregationEventById"
      },
      "put": {
        "tags": [
          "AggregationEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationEvent"
                }
              }
            }
          }
        },
        "summary": "Update a AggregationEvent",
        "operationId": "updateAggregationEventById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregationEvent"
              }
            }
          }
        }
      }
    },
    "/transformationEvents": {
      "post": {
        "tags": [
          "TransformationEvent"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationEvent"
                }
              }
            }
          }
        },
        "summary": "Create a new TransformationEvent",
        "operationId": "createTransformationEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransformationEvent"
              }
            }
          }
        }
      }
    },
    "/transformationEvents/{eventID}": {
      "get": {
        "tags": [
          "TransformationEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationEvent"
                }
              }
            }
          }
        },
        "summary": "Get a TransformationEvent",
        "operationId": "getTransformationEventById"
      },
      "put": {
        "tags": [
          "TransformationEvent"
        ],
        "parameters": [
          {
            "name": "eventID",
            "description": "The unique identifier of this event - SHOULD be a UUID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransformationEvent"
                }
              }
            }
          }
        },
        "summary": "Update a TransformationEvent",
        "operationId": "updateTransformationEventById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransformationEvent"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "protective_marking": {
        "in": "header",
        "name": "X-Protective-Marking",
        "schema": {
          "type": "string"
        },
        "x-example": "X-Protective-Marking: VER=<ver>, NS=gov.au, SEC=<securityClassification>",
        "description": "Transmission of any payload, request or response, containing data classified as having a high business impact level or above SHOULD apply by an ‘x-protective-marking’ HTTP header.\n-\tAn ‘x-protective-marking’ HTTP header MUST be used to apply appropriate protective marking to Commonwealth information classified as having a high business impact level or above (classification of ‘PROTECTED’), and SHOULD be applied to Commonwealth information classified as having a medium business impact level."
      }
    },
    "schemas": {
      "ObjectEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeItem"
            },
            "description": ""
          },
          "quantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantityElement"
            },
            "description": ""
          },
          "eventID": {
            "type": "string",
            "description": "The unique identifier of this event - SHOULD be a UUID"
          },
          "occurrenceDateTime": {
            "type": "string",
            "description": "The date, time, date time, or other date time value of an occurrence of this header balance out."
          },
          "actionCode": {
            "type": "string",
            "example": "observe",
            "enum": [
              "observe",
              "add",
              "delete"
            ],
            "description": "The Action type says how an event relates to the lifecycle of the entity being described. For example, AggregationEvent is used to capture events related to aggregations of objects, such as cases aggregated to a pallet. Throughout its life, the pallet load participates in many business process steps, each of which may generate an EPCIS event. The action field of each event says how the aggregation itself has changed during the event: have objects been added to the aggregation, have objects been removed from the aggregation, or has the aggregation simply been observed without change to its membership? The action is independent of the bizStep (of type BusinessStepID) which identifies the specific business process step in which the action took place.  allowed values are: - ADD (The entity in question has been created or added to.) - OBSERVE (Theentityinquestionhasnotbeenchanged:ithasneitherbeencreated,addedto,destroyed,orremovedfrom.) - DELETE (The entity in question has been removed from or destroyed altogether.)"
          },
          "dispositionCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/dispositionCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/dispositionCode\n"
          },
          "businessStepCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/businessStepCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/businessStepCode\n"
          },
          "readPointID": {
            "type": "string",
            "description": ""
          },
          "businessLocation": {
            "$ref": "#/components/schemas/Location",
            "description": ""
          },
          "certification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificationInfo"
            },
            "description": ""
          }
        }
      },
      "TradeItem": {
        "type": "object",
        "properties": {
          "productID": {
            "type": "string",
            "description": "The unique identifier of this logistics label."
          },
          "name": {
            "type": "string",
            "description": "The name, expressed as text, for this trade product group."
          }
        }
      },
      "QuantityElement": {
        "type": "object",
        "properties": {
          "productClass": {
            "type": "string",
            "description": "The unique identifier of this logistics label."
          },
          "quantity": {
            "required": true,
            "type": "string",
            "description": "The actual quantity for this work item quantity analysis."
          },
          "uom": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/unitOfMeasureCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/unitOfMeasureCode\n"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "identification": {
            "type": "string",
            "description": "The unique identifier of this logistics label."
          },
          "name": {
            "type": "string",
            "description": "The name, expressed as text, for this trade product group."
          }
        }
      },
      "CertificationInfo": {
        "type": "object",
        "properties": {
          "AssertionID": {
            "type": "string",
            "description": ""
          },
          "EvidenceURL": {
            "type": "string",
            "description": ""
          }
        }
      },
      "TransactionEvent": {
        "type": "object",
        "properties": {
          "sourceParty": {
            "$ref": "#/components/schemas/TradeParty",
            "description": ""
          },
          "destinationParty": {
            "$ref": "#/components/schemas/TradeParty",
            "description": ""
          },
          "transactionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeTransaction"
            },
            "description": ""
          },
          "quantity": {
            "$ref": "#/components/schemas/QuantityElement",
            "description": ""
          },
          "eventID": {
            "type": "string",
            "description": "The unique identifier of this event - SHOULD be a UUID"
          },
          "occurrenceDateTime": {
            "type": "string",
            "description": "The date, time, date time, or other date time value of an occurrence of this header balance out."
          },
          "actionCode": {
            "type": "string",
            "example": "observe",
            "enum": [
              "observe",
              "add",
              "delete"
            ],
            "description": "The Action type says how an event relates to the lifecycle of the entity being described. For example, AggregationEvent is used to capture events related to aggregations of objects, such as cases aggregated to a pallet. Throughout its life, the pallet load participates in many business process steps, each of which may generate an EPCIS event. The action field of each event says how the aggregation itself has changed during the event: have objects been added to the aggregation, have objects been removed from the aggregation, or has the aggregation simply been observed without change to its membership? The action is independent of the bizStep (of type BusinessStepID) which identifies the specific business process step in which the action took place.  allowed values are: - ADD (The entity in question has been created or added to.) - OBSERVE (Theentityinquestionhasnotbeenchanged:ithasneitherbeencreated,addedto,destroyed,orremovedfrom.) - DELETE (The entity in question has been removed from or destroyed altogether.)"
          },
          "dispositionCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/dispositionCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/dispositionCode\n"
          },
          "businessStepCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/businessStepCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/businessStepCode\n"
          },
          "readPointID": {
            "type": "string",
            "description": ""
          },
          "businessLocation": {
            "$ref": "#/components/schemas/Location",
            "description": ""
          },
          "certification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificationInfo"
            },
            "description": ""
          }
        }
      },
      "TradeParty": {
        "type": "object",
        "properties": {
          "partyID": {
            "type": "string",
            "description": "The unique identifier of this logistics label."
          },
          "name": {
            "type": "string",
            "description": "The name, expressed as text, for this trade product group."
          }
        }
      },
      "TradeTransaction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/documentTypeCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/documentTypeCode\n"
          },
          "documentURL": {
            "type": "string",
            "description": ""
          }
        }
      },
      "AggregationEvent": {
        "type": "object",
        "properties": {
          "parentItem": {
            "$ref": "#/components/schemas/TradeItem",
            "description": ""
          },
          "childItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeItem"
            },
            "description": ""
          },
          "childQuantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantityElement"
            },
            "description": ""
          },
          "eventID": {
            "type": "string",
            "description": "The unique identifier of this event - SHOULD be a UUID"
          },
          "occurrenceDateTime": {
            "type": "string",
            "description": "The date, time, date time, or other date time value of an occurrence of this header balance out."
          },
          "actionCode": {
            "type": "string",
            "example": "observe",
            "enum": [
              "observe",
              "add",
              "delete"
            ],
            "description": "The Action type says how an event relates to the lifecycle of the entity being described. For example, AggregationEvent is used to capture events related to aggregations of objects, such as cases aggregated to a pallet. Throughout its life, the pallet load participates in many business process steps, each of which may generate an EPCIS event. The action field of each event says how the aggregation itself has changed during the event: have objects been added to the aggregation, have objects been removed from the aggregation, or has the aggregation simply been observed without change to its membership? The action is independent of the bizStep (of type BusinessStepID) which identifies the specific business process step in which the action took place.  allowed values are: - ADD (The entity in question has been created or added to.) - OBSERVE (Theentityinquestionhasnotbeenchanged:ithasneitherbeencreated,addedto,destroyed,orremovedfrom.) - DELETE (The entity in question has been removed from or destroyed altogether.)"
          },
          "dispositionCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/dispositionCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/dispositionCode\n"
          },
          "businessStepCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/businessStepCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/businessStepCode\n"
          },
          "readPointID": {
            "type": "string",
            "description": ""
          },
          "businessLocation": {
            "$ref": "#/components/schemas/Location",
            "description": ""
          },
          "certification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificationInfo"
            },
            "description": ""
          }
        }
      },
      "TransformationEvent": {
        "type": "object",
        "properties": {
          "outputItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeItem"
            },
            "description": ""
          },
          "inputItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeItem"
            },
            "description": ""
          },
          "inputQuantity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantityElement"
            },
            "description": ""
          },
          "outputQuantity": {
            "$ref": "#/components/schemas/QuantityElement",
            "description": ""
          },
          "eventID": {
            "type": "string",
            "description": "The unique identifier of this event - SHOULD be a UUID"
          },
          "occurrenceDateTime": {
            "type": "string",
            "description": "The date, time, date time, or other date time value of an occurrence of this header balance out."
          },
          "actionCode": {
            "type": "string",
            "example": "observe",
            "enum": [
              "observe",
              "add",
              "delete"
            ],
            "description": "The Action type says how an event relates to the lifecycle of the entity being described. For example, AggregationEvent is used to capture events related to aggregations of objects, such as cases aggregated to a pallet. Throughout its life, the pallet load participates in many business process steps, each of which may generate an EPCIS event. The action field of each event says how the aggregation itself has changed during the event: have objects been added to the aggregation, have objects been removed from the aggregation, or has the aggregation simply been observed without change to its membership? The action is independent of the bizStep (of type BusinessStepID) which identifies the specific business process step in which the action took place.  allowed values are: - ADD (The entity in question has been created or added to.) - OBSERVE (Theentityinquestionhasnotbeenchanged:ithasneitherbeencreated,addedto,destroyed,orremovedfrom.) - DELETE (The entity in question has been removed from or destroyed altogether.)"
          },
          "dispositionCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/dispositionCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/dispositionCode\n"
          },
          "businessStepCode": {
            "type": "string",
            "x-external-enumeration": "https://api.sustainability.unece.org/referenceData/businessStepCode",
            "description": "\n\nThis is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://api.sustainability.unece.org/referenceData/businessStepCode\n"
          },
          "readPointID": {
            "type": "string",
            "description": ""
          },
          "businessLocation": {
            "$ref": "#/components/schemas/Location",
            "description": ""
          },
          "certification": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CertificationInfo"
            },
            "description": ""
          }
        }
      },
      "Template_ErrorSchema": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template_Error"
            },
            "description": ""
          }
        }
      },
      "Template_Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": ""
          },
          "detail": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "source": {
            "$ref": "#/components/schemas/Template_ErrorSource",
            "description": ""
          }
        }
      },
      "Template_ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "description": ""
          },
          "parameter": {
            "type": "string",
            "description": ""
          }
        }
      }
    },
    "responses": {},
    "securitySchemes": {
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      }
    }
  }
}